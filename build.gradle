plugins {
	id 'org.springframework.boot' version '2.6.4'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'org.asciidoctor.convert' version '1.5.8'
	id 'java'
	id 'java-library'
}

group = 'com.sepacyber.services.sidecar'
sourceCompatibility = '14'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext {
	set('snippetsDir', file("build/generated-snippets"))
	set('springCloudVersion', "2021.0.1")
}

bootJar {
	enabled = true
}

jar {
	manifest {
		attributes(
				'Main-Class': 'com.sepacyber.services.sidecar.configsidecar.ConfigSidecarApplication'
		)
	}
}

dependencies {

	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation('org.springframework.boot:spring-boot-starter-data-redis')
	implementation 'redis.clients:jedis'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.flywaydb:flyway-core'
	implementation 'org.springframework.cloud:spring-cloud-starter-sleuth'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation group: 'org.springdoc', name: 'springdoc-openapi-ui', version: '1.6.3'
	implementation 'com.vladmihalcea:hibernate-types-52:2.12.1' /* includes useful hibernate types to map postgres jsonb column to java objects  */

	runtimeOnly 'org.postgresql:postgresql'

	implementation 'org.apache.commons:commons-lang3:3.0'
	implementation 'com.google.code.gson:gson:2.8.6'
	implementation 'com.google.code.findbugs:jsr305:3.0.0'

	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	implementation 'net.andreinc:mockneat:0.4.8'
	//providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
	testImplementation 'org.projectlombok:lombok'
	testImplementation 'com.google.code.gson:gson:2.8.6'

}

String getConfigurationProperty(String envVar, String sysProp) {
	System.getenv(envVar) ?: project.findProperty(sysProp)
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

tasks.named('test') {
	outputs.dir snippetsDir
	useJUnitPlatform()
}

tasks.named('asciidoctor') {
	inputs.dir snippetsDir
	dependsOn test
}

